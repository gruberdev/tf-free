---
kind: pipeline
type: docker
name: Kickoff
trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
  repo:
    - gruberdev/tf-free
steps:
  - name: Notification Webhook
    image: appleboy/drone-discord
    settings:
      webhook_id:
        from_secret: discord_id
      webhook_token:
        from_secret: discord_token
      message: |-
        Drone CI multi-pipeline task initialized.
        Build number: {{build.number}}

---
kind: pipeline
type: exec
name: Basic testing
trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
  repo:
    - gruberdev/tf-free
steps:
  - name: Terraform Plan
    commands:
      - mkdir -p ~/.ssh-temp
      - chmod 700 ~/.ssh-temp
      - ssh-keygen -t rsa -b 4096 -C "example@gmail.com" -N 'test' -f ~/.ssh-temp/id_rsa
      - gcloud auth activate-service-account --key-file /home/gruber/gcp.json
      - terraform init -reconfigure -force-copy
      - echo "$${GOOGLE_KEY}" > $PWD/gcp.json
      - export GOOGLE_APPLICATION_CREDENTIALS=$PWD/gcp.json
      - terraform plan
    when:
      event:
        - push
    environment:
      GOOGLE_APPLICATION_CREDENTIALS:
        from_secret: gcp_key_path
      GOOGLE_KEY:
        from_secret: gcp_default
      PROJECT_ID:
        from_secret: gcp_project_id
      SERVICE_ACCOUNT:
        from_secret: gcp_app_key
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: Docker build
    commands:
      - task docker-test
    when:
      event:
        - push
    environment:
      GOOGLE_APPLICATION_CREDENTIALS:
        from_secret: gcp_key_path
      PROJECT_ID:
        from_secret: gcp_project_id
      SERVICE_ACCOUNT:
        from_secret: gcp_app_key
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  # - name: tfsec
  #   image: tfsec/tfsec
  #   commands:
  #     - tfsec . -e GCP003,AWS044,GEN003
  #   when:
  #     status:
  #       - success
  #       - failure
  #     event:
  #       - push
  #       - pull_request
  #   environment:
  #     GOOGLE_PROJECT:
  #       from_secret: gcp_project_id
  #     GOOGLE_KEY:
  #       from_secret: gcp_default
  #     AWS_DEFAULT_REGION:
  #       from_secret: aws_region
  #     AWS_SECRET_ACCESS_KEY:
  #       from_secret: awswwwwwwwwwwwwwwwwwwwwww_key
  #     AWS_ACCESS_KEY_ID:
  #       from_secret: aws_id

  # - name: terrascan
  #   image: accurics/terrascan
  #   commands:
  #     - terrascan scan
  #   when:
  #     status:
  #       - success
  #       - failure
  #     event:
  #       - push
  #       - pull_request
  #       - rollback
  #   environment:
  #     GOOGLE_PROJECT:
  #       from_secret: gcp_project_id
  #     GOOGLE_KEY:
  #       from_secret: gcp_default
  #     AWS_DEFAULT_REGION:
  #       from_secret: aws_region
  #     AWS_SECRET_ACCESS_KEY:
  #       from_secret: aws_key
  #     AWS_ACCESS_KEY_ID:
  #       from_secret: aws_id

---
kind: pipeline
type: docker
name: Amazon Web Services (AWS)
depends_on:
  - Basic testing
  - Kickoff
trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
  branch:
    - main
    - feature/aws_*
  repo:
    - gruberdev/tf-free
steps:
  - name: Setup AWS
    image: golang:1.16.4-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task aws-init
    environment:
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: Unit Test EC2
    image: golang:1.16.4-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task unit-ec2-aws
    depends_on:
      - Setup AWS
    environment:
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: Unit Test RDS
    image: golang:1.16.4-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task unit-rds-aws
    depends_on:
      - Setup AWS
    environment:
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

---
kind: pipeline
type: docker
name: Google Cloud Provider (GCP)
depends_on:
  - Basic testing
  - Kickoff
trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
  branch:
    - main
    - feature/gcp_*
  repo:
    - gruberdev/tf-free
steps:
  - name: Setup
    image: golang:1.16.4-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
    environment:
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      GOOGLE_KEY:
        from_secret: gcp_default
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: GCP Start Notification
    image: appleboy/drone-discord
    settings:
      webhook_id:
        from_secret: discord_id
      webhook_token:
        from_secret: discord_token
      message: |-
        Started GCP Pipeline on Drone CI.
        Build number: {{build.number}}

  - name: Unit Compute
    image: golang:1.16.5-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - echo $GOOGLE_KEY > $PWD/gcp.json
      - export GOOGLE_APPLICATION_CREDENTIALS=$PWD/gcp.json
      - task unit-compute-gcp
    depends_on:
      - Setup
    environment:
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      GOOGLE_KEY:
        from_secret: gcp_default
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: Unit Networking
    image: golang:1.16.5-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - echo $GOOGLE_KEY > $PWD/gcp.json
      - export GOOGLE_APPLICATION_CREDENTIALS=$PWD/gcp.json
      - task unit-network-gcp
    depends_on:
      - Setup
    environment:
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      GOOGLE_KEY:
        from_secret: gcp_default
      AWS_DEFAULT_REGION:
        from_secret: aws_regions
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: Unit Bucket Storage
    image: golang:1.16.5-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - echo $GOOGLE_KEY > $PWD/gcp.json
      - export GOOGLE_APPLICATION_CREDENTIALS=$PWD/gcp.json
      - task unit-storage-gcp
    depends_on:
      - Setup
      - Unit Networking
      - Unit Compute
    environment:
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      GOOGLE_KEY:
        from_secret: gcp_default
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: Integration Core Provider
    image: golang:1.16.5-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - echo $GOOGLE_KEY > $PWD/gcp.json
      - export GOOGLE_APPLICATION_CREDENTIALS=$PWD/gcp.json
      - task gcp-test
    depends_on:
      - Unit Networking
      - Unit Compute
      - Setup
      - Unit Storage
    environment:
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      GOOGLE_KEY:
        from_secret: gcp_default
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

---
kind: pipeline
type: docker
name: Documentation
depends_on:
  - Basic testing
  - Kickoff
trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
  branch:
    - main
  repo:
    - gruberdev/tf-free
steps:
  - name: build_static
    image: node:14.4
    commands:
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh
      - echo -e "Host *\n\tStrictHostKeyChecking no\n\tIdentityFile ~/ssh_key\n\n" > ~/.ssh/config
      - echo -e "$SSH_KEY" > ~/ssh_key
      - chmod 600 ~/ssh_key
      - apt-get update && apt-get install -y git openssh-server openssh-client
      - npm install -g @codedoc/cli
      - codedoc check
      - codedoc install
      - codedoc build
      - mkdir .public
      - cp -r docs/build/* .public
      - mv .public public
      - git config --global url.'https://${GITHUB_USER}:${GITHUB_PW}@github.com'.insteadOf 'https://github.com'
      - git clone $DOCS_REPO_URL
      - cp docs/vercel.json public/vercel.json
      - cp -r public/* $DOCS_REPO/ && cd $DOCS_REPO
      - git add . && git commit -a -m "updated docs" && git push
    environment:
      SSH_KEY:
        from_secret: ssh_id
      DOCS_REPO:
        from_secret: docs_dir_name
      DOCS_REPO_URL:
        from_secret: repository_url
      GITHUB_USER:
        from_secret: github_user
      GITHUB_PW:
        from_secret: github_token

---
kind: pipeline
type: docker
name: Success Webhook Notification
depends_on:
  - Basic testing
  - Kickoff
  - Google Cloud Provider (GCP)
  - Amazon Web Services (AWS)
  - Documentation
trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
  status:
    - success
  repo:
    - gruberdev/tf-free
steps:
  - name: Notification Webhook
    image: appleboy/drone-discord
    settings:
      webhook_id:
        from_secret: discord_id
      webhook_token:
        from_secret: discord_token
      message: |-
        Pipeline {{build.number}} has been sucessfully completed.

---
kind: pipeline
type: docker
name: Failure Webhook Notification
depends_on:
  - Basic testing
  - Kickoff
  - Google Cloud Provider (GCP)
  - Amazon Web Services (AWS)
  - Documentation
trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
  status:
    - failure
  repo:
    - gruberdev/tf-free
steps:
  - name: Notification Webhook
    image: appleboy/drone-discord
    settings:
      webhook_id:
        from_secret: discord_id
      webhook_token:
        from_secret: discord_token
      message: |-
        Drone CI pipeline {{build.number}} has failed.
