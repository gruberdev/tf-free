---
kind: pipeline
type: docker
name: Basic testing
trigger:
  event:
    include:
      - push
    exclude:
      - pull_request

node:
  server: home
  arm: no
  docker: yes
platform:
  os: linux
  arch: amd64

steps:
  - name: Build Image
    image: plugins/docker
    settings:
      dockerfile: Dockerfile
      pull_images: true
      repo: ghcr.io/gruberdev/freetf
      cache_from: ghcr.io/gruberdev/freetf
      registry: ghcr.io
      username: gruberdev
      password:
        from_secret: gh_token

  - name: Plan
    image: ghcr.io/gruberdev/freetf:latest
    commands:
      - mkdir -p ~/.ssh-temp
      - chmod 700 ~/.ssh-temp
      - ssh-keygen -t rsa -b 4096 -C "example@gmail.com" -N 'test' -f ~/.ssh-temp/id_rsa
      - touch key.json && echo $$GOOGLE_CREDENTIALS >> key.json
      - export GOOGLE_APPLICATION_CREDENTIAL=key.json
      - terraform init -upgrade -reconfigure -force-copy
      - terraform plan
    environment:
      ARM_CLIENT_ID:
        from_secret: arm_id
      ARM_CLIENT_CERTIFICATE_PATH:
        from secret: azure_path
      ARM_CLIENT_CERTIFICATE_PASSWORD:
        from_secret: cte_password
      ARM_SUBSCRIPTION_ID:
        from_secret: azure_sub_id
      ARM_TENANT_ID:
        from_secret: azure_tenant_id
      GOOGLE_CREDENTIALS:
        from_secret: gcp_json
      GOOGLE_PROJECT:
        from_secret: google_cloud_projectid
      AWS_DEFAULT_REGION:
        from_secret: aws_default_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_account_secret
      AWS_ACCESS_KEY_ID:
        from_secret: aws_account_id
    depends_on:
      - Build Image

  - name: Validate
    image: ghcr.io/gruberdev/freetf:latest
    commands:
      - mkdir -p ~/.ssh-temp
      - chmod 700 ~/.ssh-temp
      - ssh-keygen -t rsa -b 4096 -C "example@gmail.com" -N 'test' -f ~/.ssh-temp/id_rsa
      - touch key.json && echo $$GOOGLE_CREDENTIALS >> key.json
      - export GOOGLE_APPLICATION_CREDENTIAL=key.json
      - terraform init -upgrade -reconfigure -force-copy
      - terraform validate
    environment:
      ARM_CLIENT_ID:
        from_secret: arm_id
      ARM_CLIENT_CERTIFICATE_PATH:
        from secret: azure_path
      ARM_CLIENT_CERTIFICATE_PASSWORD:
        from_secret: cte_password
      ARM_SUBSCRIPTION_ID:
        from_secret: azure_sub_id
      ARM_TENANT_ID:
        from_secret: azure_tenant_id
      GOOGLE_CREDENTIALS:
        from_secret: gcp_json
      GOOGLE_PROJECT:
        from_secret: google_cloud_projectid
      AWS_DEFAULT_REGION:
        from_secret: aws_default_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_account_secret
      AWS_ACCESS_KEY_ID:
        from_secret: aws_account_id
    depends_on:
      - Build Image

  - name: Finished testing
    image: ghcr.io/gruberdev/freetf:latest
    commands:
      - echo "Finished basic setup!"
    depends_on:
      - Validate
      - Plan
      - Build Image

# - name: tfsec
#   image: tfsec/tfsec
#   commands:
#     - tfsec . -e GCP003,AWS044,GEN003
#   when:
#     status:
#       - success
#       - failure
#     event:
#       - push
#       - pull_request
#   environment:
#     GOOGLE_PROJECT:
#       from_secret: gcp_project_id
#     GOOGLE_KEY:
#       from_secret: gcp_default
#     AWS_DEFAULT_REGION:
#       from_secret: aws_region
#     AWS_SECRET_ACCESS_KEY:
#       from_secret: aws_key
#     AWS_ACCESS_KEY_ID:
#       from_secret: aws_id
# - name: terrascan
#   image: accurics/terrascan
#   commands:
#     - terrascan scan
#   when:
#     status:
#       - success
#       - failure
#     event:
#       - push
#       - pull_request
#       - rollback
#   environment:
#     GOOGLE_PROJECT:
#       from_secret: gcp_project_id
#     GOOGLE_KEY:
#       from_secret: gcp_default
#     AWS_DEFAULT_REGION:
#       from_secret: aws_region
#     AWS_SECRET_ACCESS_KEY:
#       from_secret: aws_key
#     AWS_ACCESS_KEY_ID:
#       from_secret: aws_id
# ---
# kind: pipeline
# type: docker
# name: Amazon Web Services (AWS)
# platform:
#   arch: amd64
# depends_on:
#   - Basic testing
#   - Kickoff
# trigger:
#   exclude:
#     - pull_request
#   include:
#     - push
#   branch:
#     exclude:
#       - renovate/*
#     include:
#       - main
#       - feature/aws_*
# steps:
#   - name: Setup AWS
#     image: golang:1.16.6-alpine
#     commands:
#       - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
#       - task init-drone
#       - task aws-init
#     environment:
#       AWS_DEFAULT_REGION:
#         from_secret: aws_region
#       AWS_SECRET_ACCESS_KEY:
#         from_secret: aws_key
#       AWS_ACCESS_KEY_ID:
#         from_secret: aws_id
#   - name: Unit Test EC2
#     image: golang:1.16.6-alpine
#     commands:
#       - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
#       - task init-drone
#       - task unit-ec2-aws
#     depends_on:
#       - Setup AWS
#     environment:
#       AWS_DEFAULT_REGION:
#         from_secret: aws_region
#       AWS_SECRET_ACCESS_KEY:
#         from_secret: aws_key
#       AWS_ACCESS_KEY_ID:
#         from_secret: aws_id
#   - name: Unit Test RDS
#     image: golang:1.16.6-alpine
#     commands:
#       - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
#       - task init-drone
#       - task unit-rds-aws
#     depends_on:
#       - Setup AWS
#       - Unit Test EC2
#     environment:
#       AWS_DEFAULT_REGION:
#         from_secret: aws_region
#       AWS_SECRET_ACCESS_KEY:
#         from_secret: aws_key
#       AWS_ACCESS_KEY_ID:
#         from_secret: aws_id
# ---
# kind: pipeline
# type: docker
# name: Google Cloud Provider (GCP)
# platform:
#   arch: amd64
# depends_on:
#   - Basic testing
#   - Kickoff
# trigger:
#   exclude:
#     - pull_request
#   include:
#     - push
#   branch:
#     exclude:
#       - renovate/*
#     include:
#       - main
#       - feature/gcp_*
# steps:
#   - name: Setup
#     image: golang:1.16.6-alpine
#     commands:
#       - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
#       - task init-drone
#     environment:
#       GOOGLE_CREDENTIALS:
#         from_secret: gcp_key
#       GOOGLE_PROJECT:
#         from_secret: gcp_project_id

#   - name: GCP Start Notification
#     image: appleboy/drone-discord
#     settings:
#       webhook_id:
#         from_secret: discord_id
#       webhook_token:
#         from_secret: discord_token
#       message: |-
#         Started GCP Pipeline on Drone CI.
#         Build number: {{build.number}}

#   - name: Unit Compute
#     image: golang:1.16.6-alpine
#     commands:
#       - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
#       - task init-drone
#       - task unit-compute-gcp
#     depends_on:
#       - Setup
#     environment:
#       GOOGLE_CREDENTIALS:
#         from_secret: gcp_key
#       GOOGLE_PROJECT:
#         from_secret: gcp_project_id

#   - name: Unit Networking
#     image: golang:1.16.6-alpine
#     commands:
#       - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
#       - task init-drone
#       - task unit-network-gcp
#     depends_on:
#       - Setup
#     environment:
#       GOOGLE_CREDENTIALS:
#         from_secret: gcp_key
#       GOOGLE_PROJECT:
#         from_secret: gcp_project_id

#   # - name: Unit Bucket Storage
#   #   image: golang:1.16.5-alpine
#   #   commands:
#   #     - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
#   #     - task init-drone
#   #     - task unit-storage-gcp
#   #   depends_on:
#   #     - Setup
#   #     - Unit Networking
#   #     - Unit Compute
#   #   environment:
#   #     GOOGLE_CREDENTIALS:
#   #       from_secret: gcp_key
#   #     GOOGLE_PROJECT:
#   #       from_secret: gcp_project_id

#   - name: Testing has been sucessful
#     image: golang:1.16.6-alpine
#     commands:
#       - echo "Finished."
#     depends_on:
#       - Unit Networking
#       - Unit Compute
#       - Setup
#     environment:
#       GOOGLE_CREDENTIALS:
#         from_secret: gcp_key
#       GOOGLE_PROJECT:
#         from_secret: gcp_project_id

# ---
# kind: pipeline
# type: docker
# name: Success Webhook Notification
# platform:
#   arch: amd64
# depends_on:
#   - Basic testing
#   - Kickoff
#   - Google Cloud Provider (GCP)
#   - Amazon Web Services (AWS)
# trigger:
#   event:
#     include:
#       - push
#     exclude:
#       - pull_request
#   status:
#     - success
# steps:
#   - name: Notification Webhook
#     image: appleboy/drone-discord
#     settings:
#       webhook_id:
#         from_secret: discord_id
#       webhook_token:
#         from_secret: discord_token
#       message: |-
#         Pipeline {{build.number}} has been sucessfully completed.
