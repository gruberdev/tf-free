---
kind: pipeline
type: docker
name: Kickoff
trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
steps:
  - name: Notification Webhook
    image: appleboy/drone-discord
    settings:
      webhook_id:
        from_secret: discord_id
      webhook_token:
        from_secret: discord_token
      message: |-
        Drone CI multi-pipeline task initialized.
        Build number: {{build.number}}

---
kind: pipeline
type: exec
name: Basic testing
trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
steps:
  - name: Terraform Plan
    commands:
      - mkdir -p ~/.ssh-temp
      - chmod 700 ~/.ssh-temp
      - ssh-keygen -t rsa -b 4096 -C "example@gmail.com" -N 'test' -f ~/.ssh-temp/id_rsa
      - gcloud auth activate-service-account --key-file /home/gruber/gcp.json
      - terraform init -reconfigure -force-copy
      - terraform plan
    environment:
      GOOGLE_CREDENTIALS:
        from_secret: gcp_key
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id
  - name: Docker build
    commands:
      - task docker-test
    environment:
      GOOGLE_APPLICATION_CREDENTIALS:
        from_secret: gcp_key_path
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      SERVICE_ACCOUNT:
        from_secret: gcp_app_key
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: Complete basic
    commands:
      - echo "Finished basic setup!"
    depends_on:
      - Docker build
      - Terraform Plan

  # - name: tfsec
  #   image: tfsec/tfsec
  #   commands:
  #     - tfsec . -e GCP003,AWS044,GEN003
  #   when:
  #     status:
  #       - success
  #       - failure
  #     event:
  #       - push
  #       - pull_request
  #   environment:
  #     GOOGLE_PROJECT:
  #       from_secret: gcp_project_id
  #     GOOGLE_KEY:
  #       from_secret: gcp_default
  #     AWS_DEFAULT_REGION:
  #       from_secret: aws_region
  #     AWS_SECRET_ACCESS_KEY:
  #       from_secret: awswwwwwwwwwwwwwwwwwwwwww_key
  #     AWS_ACCESS_KEY_ID:
  #       from_secret: aws_id

  # - name: terrascan
  #   image: accurics/terrascan
  #   commands:
  #     - terrascan scan
  #   when:
  #     status:
  #       - success
  #       - failure
  #     event:
  #       - push
  #       - pull_request
  #       - rollback
  #   environment:
  #     GOOGLE_PROJECT:
  #       from_secret: gcp_project_id
  #     GOOGLE_KEY:
  #       from_secret: gcp_default
  #     AWS_DEFAULT_REGION:
  #       from_secret: aws_region
  #     AWS_SECRET_ACCESS_KEY:
  #       from_secret: aws_key
  #     AWS_ACCESS_KEY_ID:
  #       from_secret: aws_id

---
kind: pipeline
type: docker
name: Amazon Web Services (AWS)
depends_on:
  - Basic testing
  - Kickoff
trigger:
  exclude:
    - pull_request
  branch:
    - main
    - feature/aws_*
steps:
  - name: Setup AWS
    image: golang:1.16.4-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task aws-init
    environment:
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: Unit Test EC2
    image: golang:1.16.4-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task unit-ec2-aws
    depends_on:
      - Setup AWS
    environment:
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: Unit Test RDS
    image: golang:1.16.4-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task unit-rds-aws
    depends_on:
      - Setup AWS
      - Unit Test EC2
    environment:
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

---
kind: pipeline
type: docker
name: Google Cloud Provider (GCP)
depends_on:
  - Basic testing
  - Kickoff
trigger:
  exclude:
    - pull_request
  branch:
    - main
    - feature/gcp_*
steps:
  - name: Setup
    image: golang:1.16.4-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
    environment:
      GOOGLE_CREDENTIALS:
        from_secret: gcp_key
      GOOGLE_PROJECT:
        from_secret: gcp_project_id

  - name: GCP Start Notification
    image: appleboy/drone-discord
    settings:
      webhook_id:
        from_secret: discord_id
      webhook_token:
        from_secret: discord_token
      message: |-
        Started GCP Pipeline on Drone CI.
        Build number: {{build.number}}

  - name: Unit Compute
    image: golang:1.16.5-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task unit-compute-gcp
    depends_on:
      - Setup
    environment:
      GOOGLE_CREDENTIALS:
        from_secret: gcp_key
      GOOGLE_PROJECT:
        from_secret: gcp_project_id

  - name: Unit Networking
    image: golang:1.16.5-alpine
    commands:
      - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task unit-network-gcp
    depends_on:
      - Setup
    environment:
      GOOGLE_CREDENTIALS:
        from_secret: gcp_key
      GOOGLE_PROJECT:
        from_secret: gcp_project_id

  # - name: Unit Bucket Storage
  #   image: golang:1.16.5-alpine
  #   commands:
  #     - apk update && apk add curl && sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
  #     - task init-drone
  #     - task unit-storage-gcp
  #   depends_on:
  #     - Setup
  #     - Unit Networking
  #     - Unit Compute
  #   environment:
  #     GOOGLE_CREDENTIALS:
  #       from_secret: gcp_key
  #     GOOGLE_PROJECT:
  #       from_secret: gcp_project_id

  - name: Testing has been sucessful
    image: golang:1.16.5-alpine
    commands:
      - echo "Finished."
    depends_on:
      - Unit Networking
      - Unit Compute
      - Setup
    environment:
      GOOGLE_CREDENTIALS:
        from_secret: gcp_key
      GOOGLE_PROJECT:
        from_secret: gcp_project_id

---
kind: pipeline
type: docker
name: Success Webhook Notification
depends_on:
  - Basic testing
  - Kickoff
  - Google Cloud Provider (GCP)
  - Amazon Web Services (AWS)
trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
  status:
    - success
steps:
  - name: Notification Webhook
    image: appleboy/drone-discord
    settings:
      webhook_id:
        from_secret: discord_id
      webhook_token:
        from_secret: discord_token
      message: |-
        Pipeline {{build.number}} has been sucessfully completed.

---
kind: pipeline
type: docker
name: Failure Webhook Notification
depends_on:
  - Basic testing
  - Kickoff
  - Google Cloud Provider (GCP)
  - Amazon Web Services (AWS)
trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
  status:
    - failure
steps:
  - name: Notification Webhook
    image: appleboy/drone-discord
    settings:
      webhook_id:
        from_secret: discord_id
      webhook_token:
        from_secret: discord_token
      message: |-
        Drone CI pipeline {{build.number}} has failed.
