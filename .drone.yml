---
kind: pipeline
type: docker
name: Static Code Analysis
steps:
  - name: plan
    image: golang:1.16.4-alpine
    commands:
      - apk add curl
      - mkdir -p /root/keys && echo $GOOGLE_KEY >> /root/keys/application_default_credentials.json
      - export GOOGLE_APPLICATION_CREDENTIALS=/root/keys/application_default_credentials.json
      - TF_VAR_aws_default_region=$(echo $AWS_DEFAULT_REGION  | sed -e 's/\r//g')
      - TF_VAR_aws_account_id=$(echo $AWS_ACCESS_KEY_ID  | sed -e 's/\r//g')      -
      - TF_VAR_aws_account_key=$(echo $AWS_SECRET_ACCESS_KEY_ID  | sed -e 's/\r//g')
      - sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task tf-init
      - terraform plan
    when:
      event:
        - push
        - pull_request
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      GOOGLE_KEY:
        from_secret: gcp_default
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: tfsec
    image: tfsec/tfsec
    commands:
      - tfsec . -e GCP003,AWS044,GEN003
    when:
      status:
        - success
        - failure
      event:
        - push
        - pull_request
    environment:
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      GOOGLE_KEY:
        from_secret: gcp_default
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: terrascan
    image: accurics/terrascan
    commands:
      - terrascan scan
    when:
      status:
        - success
        - failure
      event:
        - push
        - pull_request
        - rollback
    environment:
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      GOOGLE_KEY:
        from_secret: gcp_default
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id
---
kind: pipeline
type: docker
name: Google Cloud Provider (GCP)
steps:
  - name: Setup
    image: golang:1.16.4-alpine
    commands:
      - apk add curl
      - mkdir -p /root/keys && echo $GOOGLE_KEY >> /root/keys/application_default_credentials.json
      - export GOOGLE_APPLICATION_CREDENTIALS=/root/keys/application_default_credentials.json
      - TF_VAR_aws_default_region=$(echo $AWS_DEFAULT_REGION  | sed -e 's/\r//g')
      - TF_VAR_aws_account_id=$(echo $AWS_ACCESS_KEY_ID  | sed -e 's/\r//g')      -
      - TF_VAR_aws_account_key=$(echo $AWS_SECRET_ACCESS_KEY_ID  | sed -e 's/\r//g')
      - sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task drone-gcp
    when:
      branch:
        include:
          - master
          - feature/gcp_*
      event:
        - push
    environment:
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      GOOGLE_KEY:
        from_secret: gcp_default
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: Unit Compute
    image: golang:1.16.4-alpine
    commands:
      - apk add curl
      - mkdir -p /root/keys && echo $GOOGLE_KEY > /root/keys/application_default_credentials.json
      - export GOOGLE_APPLICATION_CREDENTIALS=/root/keys/application_default_credentials.json
      - sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task drone-gcp
      - task unit-compute-gcp
    when:
      branch:
        include:
          - master
          - feature/gcp_*
      event:
        - push
    depends_on:
      - Setup
    environment:
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      GOOGLE_KEY:
        from_secret: gcp_default
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: Unit Networking
    image: golang:1.16.4-alpine
    commands:
      - apk add curl
      - mkdir -p /root/keys && echo $GOOGLE_KEY > /root/keys/application_default_credentials.json
      - export GOOGLE_APPLICATION_CREDENTIALS=/root/keys/application_default_credentials.json
      - sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task drone-gcp
      - task unit-network-gcp
    when:
      branch:
        include:
          - master
          - feature/gcp_*
      event:
        - push
    depends_on:
      - Setup
    environment:
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      GOOGLE_KEY:
        from_secret: gcp_default
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

  - name: Integration Core Provider
    image: golang:1.16.4-alpine
    commands:
      - apk add curl
      - mkdir -p /root/keys && echo $GOOGLE_KEY > /root/keys/application_default_credentials.json
      - export GOOGLE_APPLICATION_CREDENTIALS=/root/keys/application_default_credentials.json
      - sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
      - task init-drone
      - task drone-gcp
      - task integration-gcp
    when:
      branch:
        include:
          - master
          - feature/gcp_*
      event:
        - push
    depends_on:
      - Unit Networking
      - Setup
    environment:
      GOOGLE_PROJECT:
        from_secret: gcp_project_id
      GOOGLE_KEY:
        from_secret: gcp_default
      AWS_DEFAULT_REGION:
        from_secret: aws_region
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_id

---
kind: pipeline
type: docker
name: Documentation
steps:
  - name: build_static
    image: node:14.4
    commands:
      - npm install -g @codedoc/cli
      - codedoc install
      - codedoc build
    when:
      branch:
        - master
      event:
        - push
