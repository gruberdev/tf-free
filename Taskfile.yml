version: "3"

tasks:
  default:
    cmds:
      - task: help

  docker-init:
    desc: Create and cache your Docker container
    ignore_error: true
    silent: true
    cmds:
      - docker volume rm cache_terraform
      - docker volume rm repository_results
      - docker volume create cache_terraform
      - docker volume create repository_results


  docker-local:
    desc: Create and cache your Docker container
    ignore_error: true
    silent: true
    cmds:
      - docker-compose -f deployments/local.yml down
      - docker-compose -f deployments/local.yml build
      - docker-compose -f deployments/local.yml run --entrypoint /bin/bash freetf

  docker-ci:
    desc: Execute project's test workflow made specifically for CI/CD integrations
    ignore_error: true
    silent: true
    cmds:
      - docker-compose down
      - docker-compose up --build -d

  docker:
    desc: Starts the project's container.
    ignore_error: true
    silent: true
    deps:
      - build
    cmds:
      - docker run -it --rm --name freetf freetf:latest

  help:
    desc: Prints all the commands short description (this message).
    cmds:
      - task --list

  build:
    desc: Create and cache your Docker container
    cmds:
      - env -i docker build -t docker.io/grubertech/freetf:v0.1 -t docker.io/grubertech/freetf:latest .

  gcp:
    desc: Login on Google Cloud Platform using a service account
    cmds:
      - gcloud auth application-default login

  docs-gen:
    desc: Build documentation using Terraform-docs and the task command
    ignore_error: true
    silent: true
    cmds:
      - terraform-docs markdown -c .terraform-docs.yml . --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/aws --output-file README.md --header-from "header.md"
      - terraform-docs markdown -c .terraform-docs.yml ./modules/aws/ec2 --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/aws/vpc --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/aws/rds  --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/gcp  --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/gcp/compute --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/gcp/firewall --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/gcp/vpc --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/azure --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/azure/compute --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/azure/db --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/azure/vpc --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/gcp/storage --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./examples/aws/e2e --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./examples/aws/unit/rds --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./examples/aws/unit/ec2 --output-file README.md

  docs:
    desc: Initializes local setup for documentation development.
    dir: ./docs
    deps:
      - stop-docs
    cmds:
      - docker build -t tf-free:docs .
      - docker-compose up --build -d

  docs-deploy:
    desc: Deploys documentation files in a different respository.
    ignore_error: true
    silent: true
    deps:
      - stop-docs
    dir: ./docs
    cmds:
      - docker build -t tf-free:docs .
      - docker-compose -f build.yml up --build
      - rm -rf .public
      - mkdir .public
      - cp -r build/* .public/
      - cp docs/vercel.json .public/

  stop-docs:
    dir: ./docs
    ignore_error: true
    silent: true
    cmds:
      - docker-compose -f build.yml down

  graph:
    desc: Create beautiful Terraform Graphs
    cmds:
      - go get github.com/pcasteran/terraform-graph-beautifier
      - terraform graph | terraform-graph-beautifier --exclude="module.root.provider" --output-type=cyto-html > graph.html

  gcp-init:
    desc: Bootstrapping Google Cloud provider testing files
    ignore_error: true
    silent: true
    dir: ./test/gcp
    cmds:
      - rm go.mod
      - rm go.sum
      - go mod init "github.com/gruberdev/tf-free"
      - go mod tidy

  gcp-test:
    desc: Terraform testing (GCP provider)
    deps:
      - gcp-boot
      - gcp-init
      - unit-network-gcp
      - unit-compute-gcp
      - unit-storage-gcp
    cmds:
      - cd test/gcp && go test -v -timeout 10m -run TestIntegrationGCP

  aws-init:
    desc: Bootstrapping AWS provider testing files
    dir: ./test/aws
    cmds:
      - rm go.mod
      - rm go.sum
      - go mod init "github.com/gruberdev/tf-free" && go mod tidy
    ignore_error: true

  aws-test:
    deps:
      - aws-init
    desc: Integration testing - Terraform module AWS provider
    dir: ./test/aws
    cmds:
      - go test -v -timeout 10m -run TestUnitEC2
      - go test -v -timeout 10m -run TestUnitRDS

  full-test-local:
    desc: Test all configured providers in parallel.
    deps:
      - gcp-test
      - aws-test
      - docker-test
    cmds:
      - echo "Finished testing."

  apply-local:
    desc: Terraform standard local apply command
    cmds:
      - terraform init
      - terraform apply -auto-approve

  destroy-local:
    desc: Terraform standard local destroy command
    cmds:
      - terraform destroy -auto-approve

  init:
    desc: Terraform standard local init command
    cmds:
      - terraform init -upgrade

  initialapply:
    desc: Terraform standard initial apply command (w/ Backend)
    cmds:
      - terraform init -reconfigure
      - terraform apply -auto-approve
      - terraform init -force-copy

  init-docker:
    ignore_error: true
    silent: true
    dir: ./test/docker
    cmds:
      - rm go.mod
      - rm go.sum
      - go mod init "github.com/gruberdev/tf-free" && go mod tidy

  docker-test:
    desc: Unit testing Docker build.
    dir: ./test/docker
    deps:
      - init-docker
    cmds:
      - go test -v -timeout 45m -run TestDockerBuild

  lastdestroy:
    desc: Allows the backend to be destroyed, used when stopping all resources in a project.
    cmds:
      - terraform apply -var backend_destroy=true -var prevents_destroy=false -target module.terraform_state_backend -auto-approve
      - terraform init -force-copy
      - terraform destroy -target  module.aws.module.rds.aws_db_instance.rds -auto-approve
      - terraform destroy -auto-approve

  dbdestroy:
    desc: Only Terraform destroys the AWS RDS database.
    cmds:
      - terraform destroy -target module.aws.module.rds.aws_db_instance.rds -auto-approve

  apply-aws:
    desc: Terraform apply command for locala AWS environments
    cmds:
      - cd modules/aws && terraform apply -auto-approve

  apply-gcp:
    desc: Terraform standard initialization
    cmds:
      - cd modules/gcp && terraform apply -auto-approve

  destroy-gcp:
    desc: Terraform standard initialization
    cmds:
      - cd modules/gcp && terraform destroy -auto-approve

  dockerlint:
    desc: Terraform standard initialization
    cmds:
      - docker run --rm -i hadolint/hadolint < Dockerfile || true

  backend-enable:
    desc: Transfers the backend statefile information to a S3 instance associated with a NoSQL DB
    cmds:
      - terraform init -force-copy

  backend-disable:
    desc: Destroys the backend S3 provider, using the required flags  alredy.
    cmds:
      - terraform apply -target module.terraform_state_backend -auto-approve
      - terraform init -force-copy

  destroy-aws:
    desc: Destroy all resources only related to AWS
    dir: ./modules/aws
    cmds:
      - terraform destroy -auto-approve

  restart-aws:
    desc: Recreates from scratch resources on AWS
    dir: ./modules/aws
    cmds:
      - task: destroy-aws
      - terraform apply -auto-approve

  heavy-artillery:
    desc: Destroy all resources but the S3 Backend and the DynamoDB instances on AWS.
    cmds:
      - terraform destroy -target module.google_cloud -auto-approve
      - terraform destroy -target module.aws -auto-approve

  tf-clean:
    desc: Deletes all your local configuration files on Terraform's folder. WARNING THIS DELETES THE STATEILE. AVOID USING IT.
    ignore_error: true
    silent: true
    cmds:
      - rm -rf ./.terraform
      - rm -rf ./.blast
      - rm terraform.tfstate
      - rm terraform.tfstate.backup
      - rm ./.terraform.lock.hcl
      - rm backend.tf
      - rm errored.tfstate
      - rm graph.html
      - rm index.html
      - rm plan.json
      - rm plan.out
      - rm gcp.json
      - cd modules && cd gcp && rm -rf ./.terraform && rm ./.terraform.lock.hcl
      - cd modules && cd gcp && cd vpc && rm -rf ./.terraform && rm ./.terraform.lock.hcl
      - cd modules && cd gcp && cd firewall && rm -rf ./.terraform && rm ./.terraform.lock.hcl
      - cd modules && cd gcp && cd compute && rm -rf ./.terraform && rm ./.terraform.lock.hcl
      - cd modules && cd aws && rm -rf ./.terraform && rm ./.terraform.lock.hcl
      - cd modules && cd aws && cd ec2 && rm -rf ./.terraform && rm ./.terraform.lock.hcl
      - cd modules && cd aws && cd rds && rm -rf ./.terraform && rm ./.terraform.lock.hcl
      - rm examples/aws/unit/ec2/.terraform.lock.hcl
      - rm -rf examples/aws/unit/ec2/.terraform
      - rm examples/aws/unit/ec2/terraform.tfstate
      - rm examples/aws/unit/ec2/terraform.tfstate.backup
      - rm examples/aws/unit/rds/.terraform.lock.hcl
      - rm -rf examples/aws/unit/rds/.terraform
      - rm examples/aws/unit/rds/terraform.tfstate
      - rm examples/aws/unit/rds/terraform.tfstate.backup

  init-drone:
    desc: Terraform standard initialization
    cmds:
      - apk add build-base git curl
      - apk add --no-cache terraform --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community

  unit-compute-gcp:
    dir: ./test/gcp
    deps:
      - gcp-init
    cmds:
      - go test -v -timeout 5m -run TestUnitCompute

  unit-storage-gcp:
    dir: ./test/gcp
    deps:
      - gcp-init
    cmds:
      - go test -v -timeout 5m -run TestUnitStorage

  unit-network-gcp:
    dir: ./test/gcp
    deps:
      - gcp-init
    cmds:
      - go test -v -timeout 5m -run TestUnitVPC

  unit-ec2-aws:
    dir: ./test/aws
    deps:
      - aws-init
    cmds:
      - go test -v -timeout 15m -run TestUnitEC2

  unit-rds-aws:
    dir: ./test/aws
    deps:
      - aws-init
    cmds:
      - go test -v -timeout 30m -run TestUnitRDS

  blast-radius:
    cmds:
      - docker run --rm -it -p 5013:5000 -v $(pwd):/data:ro -v $(pwd)/blast:/tmp/results --security-opt apparmor:unconfined --cap-add=SYS_ADMIN blastradius:local
