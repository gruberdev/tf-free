version: "3"

tasks:
  default:
    cmds:
      - task: clean
      - task: tf-clean
      - task: generate
      - task: vet
      - task: fmt
      - task: lint
      - task: test
      - task: mod

  docker-init:
    desc: Create and cache your Docker container
    cmds:
      - docker volume rm cache_terraform || true
      - docker volume rm repository_results || true
      - docker volume create cache_terraform || true
      - docker volume create repository_results || true

  docker:
    desc: Create and cache your Docker container
    cmds:
      - docker build -t tf-free:latest .
      - docker run -it --rm --name tf-free -e GOOGLE_PROJECT=${GOOGLE_PROJECT} -v cache_terraform:/project -v repository_results:/root/.ssh tf-free:latest task docker-test

  docker-test:
    desc: Run tests from inside your container
    cmds:
      - gcloud auth login
      - cd test && go mod init "github.com/gruberdev/tf-free" || true
      - cd test && go mod tidy
      - cd test && go test -v -timeout 5m -run TestUnitCompute
      - cd test && go test -v -timeout 5m -run TestUnitVPC
      - cd test && go test -v -timeout 10m -run TestIntegrationGCP

  build-all:
    desc: Build executable binary with GoReleaser.
    cmds:
      - goreleaser --snapshot --skip-publish --rm-dist

  generate:
    desc: Initialize test fakes
    cmds:
      - go generate ./...

  vet:
    desc: Initialize module and build cache, and remake go.sum file.
    cmds:
      - go vet ./...

  fmt:
    desc: Format Go files
    cmds:
      - go fmt ./...

  mod:
    desc: Initialize module and build cache, and remake go.sum file on root directory.
    cmds:
      - go mod tidy
      - cd tools && go mod tidy

  docs-gen:
    desc: Build documentation using Terraform-docs and the task command
    cmds:
      - terraform-docs markdown -c .terraform-docs.yml . --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/aws --output-file README.md --header-from "header.md"
      - terraform-docs markdown -c .terraform-docs.yml ./modules/aws/ec2 --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/aws/firewall  --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/aws/vpc  --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/aws/subnet  --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/aws/gateway  --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/aws/rds  --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/gcp  --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/gcp/compute --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/gcp/firewall --output-file README.md
      - terraform-docs markdown -c .terraform-docs.yml ./modules/gcp/vpc --output-file README.md

  docs:
    desc: Initialize module and build cache, and remake go.sum file on root directory.
    cmds:
      - cd docs && docker-compose down || true
      - cd docs && docker build -t tf-free:docs .
      - cd docs && docker-compose up --build -d

  test:
    desc: Test and print out code coverage as html.
    cmds:
      - go test -race -covermode=atomic -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html

  lint:
    desc: Linter built on Docker.
    cmds:
      - go mod verify
      - docker run --rm -v $(pwd):/app -w /app golangci/golangci-lint:v1.40.1 golangci-lint run --enable gosec --timeout 3m0s ./...
    sources:
      - ./go.mod
      - "**/*.go"

  go-clean:
    desc: Clean cache on root module.
    cmds:
      - rm -f ./go.sum
      - go clean -cache || true
      - go clean -modcache || true

  graph:
    desc: Create beautiful Terraform Graphs
    cmds:
      - go get github.com/pcasteran/terraform-graph-beautifier
      - terraform graph | terraform-graph-beautifier --exclude="module.root.provider" --output-type=cyto-html > graph.html

  gcp-test:
    desc: Terraform testing (GCP modules)
    cmds:
      - cd test/gcp && rm go.mod || true
      - cd test/gcp && rm go.sum || true
      - cd test/gcp && go mod init "github.com/gruberdev/tf-free" && go mod tidy
      - cd test/gcp && go test -v -timeout 5m -run TestUnitCompute
      - cd test/gcp && go test -v -timeout 5m -run TestUnitVPC
      - cd test/gcp && go test -v -timeout 10m -run TestIntegrationGCP

  full-test-local:
    desc: Terraform testing (GCP modules)
    cmds:
      - cd test/gcp && rm go.mod || true
      - cd test/gcp && rm go.sum || true
      - cd test/gcp && go mod init "github.com/gruberdev/tf-free" && go mod tidy
      - cd test/gcp && go test -v -timeout 5m -run TestUnitCompute
      - cd test/gcp && go test -v -timeout 5m -run TestUnitVPC
      - cd test/gcp && go test -v -timeout 10m -run TestIntegrationGCP
      - cd test/aws && rm go.mod || true
      - cd test/aws && rm go.sum || true
      - cd test/aws && go mod init "github.com/gruberdev/tf-free" && go mod tidy
      - cd test/gcp && go test -v -timeout 5m -run TestUnitEC2

  aws-test:
    desc: Terraform testing (AWS modules)
    cmds:
      - cd test/aws && go mod init "github.com/gruberdev/tf-free" && go mod tidy
      - cd test/aws && go test -v -timeout 5m -run TestUnitEC2

  apply-local:
    desc: Terraform standard initialization
    cmds:
      - terraform init
      - terraform apply -auto-approve

  destroy-local:
    desc: Terraform standard initialization
    cmds:
      - terraform destroy -auto-approve

  init:
    desc: Terraform standard initialization
    cmds:
      - terraform init -upgrade

  initialapply:
    desc: Terraform standard initialization
    cmds:
      - terraform init -reconfigure
      - terraform apply -auto-approve
      - terraform init -force-copy

  lastdestroy:
    desc: Terraform standard initialization
    cmds:
      - terraform apply -var backend_destroy=true -target module.terraform_state_backend -auto-approve
      - terraform init -force-copy
      - terraform destroy -target  module.aws.module.rds.aws_db_instance.rds -auto-approve
      - terraform destroy -auto-approve

  dbdestroy:
    desc: Terraform standard initialization
    cmds:
      - terraform destroy -target module.aws.module.rds.aws_db_instance.rds -auto-approve

  apply-aws:
    desc: Terraform standard initialization
    cmds:
      - cd modules/aws && terraform apply -auto-approve

  apply-gcp:
    desc: Terraform standard initialization
    cmds:
      - cd modules/gcp && terraform apply -auto-approve

  destroy-gcp:
    desc: Terraform standard initialization
    cmds:
      - cd modules/gcp && terraform destroy -auto-approve

  backend-enable:
    desc: How to transfer the backend to S3 (Remote)
    cmds:
      - terraform init -force-copy

  backend-disable:
    desc: How to destroy the backend stored in S3
    cmds:
      - terraform apply -target module.terraform_state_backend -auto-approve
      - terraform init -force-copy

  destroy-aws:
    desc: Terraform standard initialization
    cmds:
      - cd modules/aws && terraform destroy -auto-approve

  restart-aws:
    desc: Terraform standard initialization
    cmds:
      - cd modules/aws && terraform destroy -auto-approve
      - cd modules/aws && terraform apply -auto-approve

  tf-clean:
    desc: Terraform standard initialization
    cmds:
      - rm -rf ./.terraform || true
      - rm terraform.tfstate || true
      - rm terraform.tfstate.backup || true
      - rm ./.terraform.lock.hcl || true
      - rm backend.tf || true
      - rm errored.tfstate || true
      - rm graph.html || true
      - rm index.html || true
      - cd modules && cd gcp && rm -rf ./.terraform && rm ./.terraform.lock.hcl || true
      - cd modules && cd gcp && cd vpc && rm -rf ./.terraform && rm ./.terraform.lock.hcl || true
      - cd modules && cd gcp && cd firewall && rm -rf ./.terraform && rm ./.terraform.lock.hcl || true
      - cd modules && cd gcp && cd compute && rm -rf ./.terraform && rm ./.terraform.lock.hcl || true
      - cd modules && cd aws && rm -rf ./.terraform && rm ./.terraform.lock.hcl || true
      - cd modules && cd aws && cd ec2 && rm -rf ./.terraform && rm ./.terraform.lock.hcl || true
      - cd modules && cd aws && cd vpc && rm -rf ./.terraform && rm ./.terraform.lock.hcl || true
      - cd modules && cd aws && cd firewall && rm -rf ./.terraform && rm ./.terraform.lock.hcl || true

  init-drone:
    desc: Terraform standard initialization
    cmds:
      - apk add build-base git
      - apk add --no-cache terraform --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community

  drone-gcp:
    desc: Terraform standard initialization
    cmds:
      - cd test/gcp && go mod init "github.com/gruberdev/tf-free" || true
      - cd test/gcp && go mod tidy

  unit-compute-gcp:
    desc: Terraform standard initialization
    cmds:
      - cd test/gcp && go test -v -timeout 5m -run TestUnitCompute

  unit-network-gcp:
    desc: Terraform standard initialization
    cmds:
      - cd test/gcp && go test -v -timeout 5m -run TestUnitVPC

  unit-ec2-aws:
    desc: Terraform standard initialization
    cmds:
      - cd test/aws && go test -v -timeout 5m -run TestUnitEC2

  integration-gcp:
    desc: Terraform standard initialization
    cmds:
      - cd test/gcp && go test -v -timeout 10m -run TestIntegrationGCP
